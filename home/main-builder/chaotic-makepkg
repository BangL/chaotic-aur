#!/usr/bin/env sh
WTMK='[chaotic-makepkg]'
if [[ -z "$(echo "$@" | grep '\-p \./tmp')" ]]; then
	if [[ -z "$(echo "$@" | grep '\-\-sign')" ]]; then
		echo 'This is used in a repo, where is --sign ??'
		exit -1
	fi

	# * Defaults
	BUILD_USER='main-builder'
	CHROOT='/tmp/chaotic-chroot'
	CHSRC="$HOME/chaotic-chroot"
	BASE='base-root'
	BASE_PKGS='base-devel'
	BASE_NUKE=0
	TARGET="$PWD"
	TARGET_UPPER="${TARGET_UPPER:-tmp.$(uuidgen)}"
	TARGET_NUKE=${TARGET_NUKE:-1}
	PKGCACHE_DIR="$CHROOT/pacman-cache"
	SRCCACHE_DIR="$CHROOT/source-cache"
	REPO_PKGDEST='/srv/http/chaotic-aur/x86_64/'

	# * PKG data
	echo "$WTMK Grabbing pkgname(s*)"
	_PKGINFO="$(makepkg --printsrcinfo)"
	_PKGNAME="$(echo "$_PKGINFO" | grep -Po '(?<=pkgname = )(.*)$')"
	_PKGNAME_HEAD="$(echo "$_PKGNAME" | head -n 1)"
	SRCCACHE_DIR="$SRCCACHE_DIR/$_PKGNAME_HEAD"

	# * Threats those who use sqlite-replication
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^dqlite(-git)?$')" ]]; then
		export BASE='dqlite-root'
		export BASE_PKGS="sqlite-replication ${BASE_PKGS}"
		export BASE_NUKE=1
	fi

	# * CHROOT Lowdir
	BASE_RUN="sudo arch-chroot -u root $CHROOT/$BASE"
	BASE_USR_RUN="sudo arch-chroot -u $BUILD_USER $CHROOT/$BASE"
	#BASE_RUN="sudo systemd-nspawn -M $BASE -u root -D $CHROOT/$BASE"
	if [[ ! -d "$CHROOT/$BASE" ]]; then
		# Create infra
		echo "$WTMK Bulding lowerdir..."
		mkdir -p "$CHROOT/$BASE"
		echo $$ > "$CHROOT/$BASE.lock"
		pushd "$CHROOT"

		# Basic packages
		sudo pacstrap -C "$CHSRC/pacman.conf" "./$BASE" $BASE_PKGS

		# Build settings
		sudo cp "$CHSRC/makepkg.conf" "./$BASE/etc/makepkg.conf" 
		sudo cp "$CHSRC/pacman.conf" "./$BASE/etc/pacman.conf" 
		sudo mkdir -p "./$BASE/usr/local/bin/"
		sudo cp "$CHSRC/internal-makepkg" "./$BASE/usr/local/bin/"
		sudo cp "$CHSRC/x11-wrapper" "./$BASE/usr/local/bin/"

		# Minimum locale
		echo 'en_US.UTF-8 UTF-8' | sudo tee "./$BASE/etc/locale.gen"
		echo 'LANG=en_US.UTF-8' | sudo tee "./$BASE/etc/locale.conf"
		sudo ln -rsf "./$BASE/usr/share/zoneinfo/America/Sao_Paulo" "./$BASE/etc/localtime"
		$BASE_RUN locale-gen

		# Build User
		$BASE_RUN useradd -u $(id -u $BUILD_USER) -m -G users -s /bin/bash $BUILD_USER
		echo "$BUILD_USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a "./$BASE/etc/sudoers"
		
		$BASE_USR_RUN mkdir -p /home/$BUILD_USER/{pkgwork,.ccache,pkgdest,pkgsrc,makepkglogs}
		cp -ar "/home/$BUILD_USER/.ssh" "./$BASE/home/$BUILD_USER/"
		cp -ar "/home/$BUILD_USER/.gnupg" "./$BASE/home/$BUILD_USER/"

		# Finish
		$BASE_RUN pacman -Scc --noconfirm
		popd
		rm "$CHROOT/$BASE.lock"
	else
		while [[ -f "$CHROOT/$BASE.lock" ]] || [[ -f "$CHROOT/$BASE/var/lib/pacman/db.lck" ]]; do
			sleep 1
		done
	fi

	# * CHROOT Upperdir
	MECHA_NAME="m$(date +%d%H%M)$(echo "$_PKGNAME_HEAD" | md5sum | cut -c1-8)"
	TARGET_RUN="sudo systemd-nspawn -M $MECHA_NAME  -u $BUILD_USER --capability=CAP_IPC_LOCK -D $CHROOT/$TARGET_UPPER/root"
	if [[ ! -d "$CHROOT/$TARGET_UPPER/root/usr" ]]; then
		echo "$WTMK Building chroot"
		mkdir -p "$PKGCACHE_DIR" "$SRCCACHE_DIR" "$CHROOT/$TARGET_UPPER/"{up,work,root}
		pushd "$CHROOT/$TARGET_UPPER"
		
		# TODO: Adjust to add multi-lib and/or zapcc
		LOWER="$CHROOT/$BASE"

		# Minimal mount
		sudo mount overlay -t overlay -olowerdir=$LOWER,upperdir=./up,workdir=./work ./root

		# Other mounts
		sudo mount --bind "$TARGET" "./root/home/$BUILD_USER/pkgwork"
		sudo mount --bind "/home/$BUILD_USER/.ccache" "./root/home/$BUILD_USER/.ccache"
		sudo mount --bind "$SRCCACHE_DIR" "./root/home/$BUILD_USER/pkgsrc"
		sudo mount --bind "$PKGCACHE_DIR" "./root/var/cache/pacman/pkg"

		# Finish
		$TARGET_RUN sudo pacman -Syu --noconfirm
		popd
	else
		echo "$WTMK Updating chroot"
		$TARGET_RUN sudo pacman -Syu --noconfirm
	fi

	# Treats VCs
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '\-git$')" ]]; then
		$TARGET_RUN sudo pacman -S --needed --noconfirm git
	fi
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '\-svn$')" ]]; then
		$TARGET_RUN sudo pacman -S --needed --noconfirm subversion
	fi
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '\-bzr$')" ]]; then
		$TARGET_RUN sudo pacman -S --needed --noconfirm bzr
	fi
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '\-hg$')" ]]; then
		$TARGET_RUN sudo pacman -S --needed --noconfirm mercurial
	fi

	# Treats multilib
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^lib32\-')" ]]; then
		echo "$WTMK lib32-* detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm multilib-devel
	fi

	# Unreal Engine
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^unreal-engine$')" ]]; then
		echo "$WTMK pantheon-core-git detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm openssh
	fi
	
	# Pantheon GIT
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^pantheon-(core|desktop)-git$')" ]]; then
		echo "$WTMK pantheon-core-git detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm polkit-consolekit gsettings-desktop-schemas-ubuntu
	fi
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^(pantheon|wingpanel|switchboard|gala)\-.*git$')" ]]; then
		echo "$WTMK pantheon-*-git detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm granite-git cmake
	fi
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^(switchboard\-.+|pantheon-applications-menu)\-git$')" ]]; then
		echo "$WTMK switchboad-*-git detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm switchboard-git
	fi

	# User cases
	if [[ ! -z "$TARGET_REMPKGS" ]]; then
		$TARGET_RUN sudo pacman -Rdd --noconfirm $TARGET_REMPKGS
	fi
	if [[ ! -z "$TARGET_EXTRAPKGS" ]]; then
		$TARGET_RUN sudo pacman -S --needed --noconfirm $TARGET_EXTRAPKGS
	fi
	if [[ ! -z "$TARGET_ENV" ]]; then
		TARGET_ENVFILE="$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgenv.sh"
		echo '#!/usr/bin/env sh' | sudo tee "$TARGET_ENVFILE" && \
		echo "$TARGET_ENV" | sudo tee -a "$TARGET_ENVFILE"
	fi

	# * Makepkg
	echo "$WTMK Finally build it:"
	if [[ ! -z "$(echo "$_PKGNAME" | grep -P '^firefox(-wayland)?-hg$')" ]]; then
		echo "$WTMK firefox-hg detected, treating..."
		$TARGET_RUN sudo pacman -S --needed --noconfirm xorg-server-xvfb
		$TARGET_RUN \
			/usr/local/bin/x11-wrapper \
			/usr/local/bin/internal-makepkg -s $@
	else
		$TARGET_RUN /usr/local/bin/internal-makepkg -s $@
	fi
	RESULT="$?"
	
	# * Deploy
	# Push artifacts to dest
	if [[ -z "$PKGDEST" ]]; then
		cp "$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgdest"/* "$REPO_PKGDEST"
	else
		cp "$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgdest"/* "$PKGDEST"
	fi

	# * Nuke
	if [[ "$TARGET_NUKE" == '1' ]]; then
		echo "$WTMK Nuking..."
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root" && \
		sudo rm -rf "$CHROOT/$TARGET_UPPER" || \
		echo "$WTMK Unable to nuke!"
	else
		sudo umount -R "$CHROOT/$TARGET_UPPER/root"
	fi
	if [[ "$BASE_NUKE" == '1' ]]; then
		echo "$WTMK Nuking BASE..."
		sudo rm -rf "$CHROOT/$BASE" || \
		echo "$WTMK Unable to nuke!"
	fi

	# Don't even know if this works...
	exit $RESULT
else
	exec makepkg $@
fi
